name: Build and Test

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'resources/**/*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.201
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal --logger:"junit;LogFileName=test-results.xml"
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Test Results
        path: '**/*/test-results.xml'

    - name: Create local manifest file
      run: dotnet new tool-manifest
    - name: Install analyzer
      run: dotnet tool install --add-source source/SemVerAnalyzer/bin/Release SemVerAnalyzer
    - name: Analyze semantic version
      run: dotnet analyze-semver -a source/SemVerAnalyzer/bin/Release/net8.0/SemVerAnalyzer.dll -o semver-report.md -c source/SemVerAnalyzer/config.json
  test-results:
    runs-on: ubuntu-latest
    needs: build
    if: success() || failure()
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1.6
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        files: '**/*/test-results.xml'
  test-badge:
    needs: test-results
    runs-on: ubuntu-latest
    steps:
    - name: Extract Branch Name
      run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Get badge details
      run: |
        find . -name test-results.xml -exec cat '{}' >> all-results.xml \;
        TEST_COUNT=`grep -Pio '(?<=tests=")\d+' all-results.xml | awk '{ SUM += $1} END { print SUM }'`
        echo "FAIL_COUNT=`grep -Pio '(?<=failures=")\d+' all-results.xml | awk '{ SUM += $1} END { print SUM }'`" >> $GITHUB_ENV
        echo "PASS_COUNT=$((TEST_COUNT - FAIL_COUNT))" >> $GITHUB_ENV
        if [[ $FAIL_COUNT -eq 0 ]]
        then
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        else
          echo "BUILD_STATUS=critical" >> $GITHUB_ENV
        fi
    - name: Create test results badge
      if: env.BRANCH == 'main'
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.TEST_BADGE_GIST_KEY }}
        gistID: db35a837ca2f0e463fa0fcf6160a5659
        filename: semver-analyzer-test-results-badge.json
        label: tests
        message: ${{ format('{0} passing | {1} failing', env.PASS_COUNT, env.FAIL_COUNT) }}
        color: ${{ env.BUILD_STATUS }}
